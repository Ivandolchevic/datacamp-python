'''
Created on Aug 31, 2017

@author: idolchevic
'''
import pandas as pd

print("---------------------------------------------------")
print("    Write a basic list comprehension")
print("---------------------------------------------------")

doctor = ['house', 'cuddy', 'chase', 'thirteen', 'wilson']

print([doc[0] for doc in doctor])


print("---------------------------------------------------")
print("   List comprehension over iterables ")
print("---------------------------------------------------")
doctor = ['house', 'cuddy', 'chase', 'thirteen', 'wilson']

range(50)

underwood = 'After all, we are nothing more or less than what we choose to reveal.'

jean = '24601'

flash = ['jay garrick', 'barry allen', 'wally west', 'bart allen']

valjean = 24601


print("---------------------------------------------------")
print("   Writing list comprehensions ")
print("---------------------------------------------------")

# Create list comprehension: squares
squares = [i**2 for i in range(0,10)]


print("---------------------------------------------------")
print("   Nested list comprehensions ")
print("---------------------------------------------------")

# Create a 5 x 5 matrix using a list of lists: matrix
matrix = [[col for col in range(0,5)] for row in range(0,5)]

# Print the matrix
for row in matrix:
    print(row)


print("---------------------------------------------------")
print("   Using conditionals in comprehensions (1) ")
print("---------------------------------------------------")

# Create a list of strings: fellowship
fellowship = ['frodo', 'samwise', 'merry', 'aragorn', 'legolas', 'boromir', 'gimli']

# Create list comprehension: new_fellowship
new_fellowship = [member  for member in fellowship if len(member) >= 7]

# Print the new list
print(new_fellowship)


print("---------------------------------------------------")
print("   Using conditionals in comprehensions (2) ")
print("---------------------------------------------------")

# Create a list of strings: fellowship
fellowship = ['frodo', 'samwise', 'merry', 'aragorn', 'legolas', 'boromir', 'gimli']

# Create list comprehension: new_fellowship
new_fellowship = [member if len(member)>=7  else "" for member in fellowship]

# Print the new list
print(new_fellowship)


print("---------------------------------------------------")
print("  Dict comprehensions  ")
print("---------------------------------------------------")

# Create a list of strings: fellowship
fellowship = ['frodo', 'samwise', 'merry', 'aragorn', 'legolas', 'boromir', 'gimli']

# Create dict comprehension: new_fellowship
new_fellowship = {member:len(member) for member in fellowship}

# Print the new list
print(new_fellowship)


print("---------------------------------------------------")
print("   List comprehensions vs generators ")
print("---------------------------------------------------")

# List of strings
fellowship = ['frodo', 'samwise', 'merry', 'aragorn', 'legolas', 'boromir', 'gimli']

# List comprehension
fellow1 = [member for member in fellowship if len(member) >= 7]

# Generator expression
fellow2 = (member for member in fellowship if len(member) >= 7)

print("---------------------------------------------------")
print("   Write your own generator expressions ")
print("---------------------------------------------------")

# Create generator object: result
result = (num for num in range(0,31))

# Print the first 5 values
print(next(result))
print(next(result))
print(next(result))
print(next(result))
print(next(result))

# Print the rest of the values
for value in result:
    print(value)


print("---------------------------------------------------")
print("   Changing the output in generator expressions ")
print("---------------------------------------------------")

# Create a list of strings: lannister
lannister = ['cersei', 'jaime', 'tywin', 'tyrion', 'joffrey']

# Create a generator object: lengths
lengths = (len(person) for person in lannister)

# Iterate over and print the values in lengths
for value in lengths:
    print(value)


print("---------------------------------------------------")
print("   Build a generator ")
print("---------------------------------------------------")

# Create a list of strings
lannister = ['cersei', 'jaime', 'tywin', 'tyrion', 'joffrey']

# Define generator function get_lengths
def get_lengths(input_list):
    """Generator function that yields the
    length of the strings in input_list."""

    # Yield the length of a string
    for person in input_list:
        yield len(person)

# Print the values generated by get_lengths()
for value in get_lengths(lannister):
    print(value)


print("---------------------------------------------------")
print("  List comprehensions for time-stamped data  ")
print("---------------------------------------------------")

df = pd.read_csv('tweets.csv')

# Extract the created_at column from df: tweet_time
tweet_time = df['created_at']

# Extract the clock time: tweet_clock_time
tweet_clock_time = [entry[11:19] for entry in tweet_time]

# Print the extracted times
print(tweet_clock_time)

print("---------------------------------------------------")
print("  Conditional list comprehesions for time-stamped data  ")
print("---------------------------------------------------")

# Extract the created_at column from df: tweet_time
tweet_time = df['created_at']

# Extract the clock time: tweet_clock_time
tweet_clock_time = [entry[11:19] for entry in tweet_time if entry[17:19] == '19']

# Print the extracted times
print(tweet_clock_time)

